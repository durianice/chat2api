name: Deploy

on:
  workflow_run:
    workflows: ["Build Docker Image"]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
    - name: SSH connect and update Docker image
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        USERNAME: ${{ secrets.VPS_USERNAME }}
        PASSWORD: ${{ secrets.VPS_PASSWORD }}
        PORT: ${{ secrets.VPS_PORT }}
        KEY: ${{ secrets.VPS_SSHKEY }}
        script: |
          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
            echo "Error: Docker is not installed. Exiting..."
            exit 1
          else
            echo "Docker is installed."
            docker --version
            # 获取Docker版本信息
            # docker_version=$(docker --version | awk '{print $3}' | cut -d',' -f1)
            # docker_version_number=$(echo "${docker_version//./}")
          fi

          # if [ "$docker_version_number" -gt 20 ]; then
          #   docker_compose_cmd="docker compose"
          # else
          #   docker_compose_cmd="docker-compose"
          # fi

          # Check if Docker Compose is installed
          if ! command -v docker compose &> /dev/null; then
            echo "Error: Docker Compose is not installed. Exiting..."
            exit 1
          else
            echo "Docker Compose is installed."
            docker compose --version
          fi

          workdir=/opt/chat2api
          if [ ! -d "$workdir" ]; then
              mkdir $workdir
          fi
          cd $workdir
          wget -O docker-compose.yml https://raw.githubusercontent.com/durianice/chat2api/main/docker-compose.yml
          if ! [[ -e docker-compose.yml ]]; then
            echo "docker-compose.yml does not exist."
            rm -r $workdir
            exit 1
          fi
          
          echo "CAPSOLVER_API_KEY=${{ secrets.CAPSOLVER_API_KEY }}" > .env

          echo "PROXY_URL=${{ vars.PROXY_URL }}" >> .env
          echo "ARKOSE_TOKEN_URL=${{ vars.ARKOSE_TOKEN_URL }}" >> .env
          echo "POW_DIFFICULTY=${{ vars.POW_DIFFICULTY }}" >> .env
          echo "RETRY_TIMES=${{ vars.RETRY_TIMES }}" >> .env
          echo "HISTORY_DISABLED=${{ vars.HISTORY_DISABLED }}" >> .env
          echo "CHATGPT_BASE_URL=${{ vars.CHATGPT_BASE_URL }}" >> .env
          echo "API_PREFIX=${{ vars.API_PREFIX }}" >> .env

          docker compose --profile no-proxy down
          docker compose --profile no-proxy pull
          docker compose --profile no-proxy up -d
          # docker image prune -f
          # rm -r $workdir